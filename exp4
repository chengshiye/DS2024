#include <iostream>
#include <vector>
#include <queue>
#include <climits>
#include <stack>
#include <unordered_set>
#include <functional>

using namespace std;

// 图的数据结构：邻接表
class Graph {
public:
    // 用邻接表表示图，pair<destination, weight>
    vector<vector<pair<int, int>>> adjList;
    int vertices;

    Graph(int v) : vertices(v) {
        adjList.resize(v);
    }

    // 添加边：无向图
    void addEdge(int u, int v, int weight) {
        adjList[u].push_back({v, weight});
        adjList[v].push_back({u, weight});
    }

    // 添加边：有向图
    void addDirectedEdge(int u, int v, int weight) {
        adjList[u].push_back({v, weight});
    }
};

// BFS 算法
void BFS(const Graph& graph, int start) {
    vector<bool> visited(graph.vertices, false);
    queue<int> q;
    visited[start] = true;
    q.push(start);

    cout << "BFS traversal starting from vertex " << start << ": ";
    while (!q.empty()) {
        int node = q.front();
        q.pop();
        cout << node << " ";

        for (const auto& neighbor : graph.adjList[node]) {
            int adjNode = neighbor.first;
            if (!visited[adjNode]) {
                visited[adjNode] = true;
                q.push(adjNode);
            }
        }
    }
    cout << endl;
}

// DFS 算法
void DFSUtil(const Graph& graph, int node, vector<bool>& visited) {
    visited[node] = true;
    cout << node << " ";

    for (const auto& neighbor : graph.adjList[node]) {
        int adjNode = neighbor.first;
        if (!visited[adjNode]) {
            DFSUtil(graph, adjNode, visited);
        }
    }
}

void DFS(const Graph& graph, int start) {
    vector<bool> visited(graph.vertices, false);
    cout << "DFS traversal starting from vertex " << start << ": ";
    DFSUtil(graph, start, visited);
    cout << endl;
}

// Dijkstra算法 - 最短路径
void Dijkstra(const Graph& graph, int start) {
    vector<int> dist(graph.vertices, INT_MAX);
    dist[start] = 0;
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    pq.push({0, start});

    while (!pq.empty()) {
        int u = pq.top().second;
        pq.pop();

        for (const auto& neighbor : graph.adjList[u]) {
            int v = neighbor.first;
            int weight = neighbor.second;
            if (dist[u] + weight < dist[v]) {
                dist[v] = dist[u] + weight;
                pq.push({dist[v], v});
            }
        }
    }

    cout << "Shortest paths from vertex " << start << " using Dijkstra's algorithm:" << endl;
    for (int i = 0; i < graph.vertices; i++) {
        cout << "Distance to vertex " << i << ": " << (dist[i] == INT_MAX ? "INF" : to_string(dist[i])) << endl;
    }
}

// Prim算法 - 最小生成树
void Prim(const Graph& graph) {
    vector<int> key(graph.vertices, INT_MAX);
    vector<bool> inMST(graph.vertices, false);
    vector<int> parent(graph.vertices, -1);
    key[0] = 0;
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    pq.push({0, 0});

    while (!pq.empty()) {
        int u = pq.top().second;
        pq.pop();

        if (inMST[u]) continue;

        inMST[u] = true;

        for (const auto& neighbor : graph.adjList[u]) {
            int v = neighbor.first;
            int weight = neighbor.second;
            if (!inMST[v] && weight < key[v]) {
                key[v] = weight;
                pq.push({key[v], v});
                parent[v] = u;
            }
        }
    }

    cout << "Minimum Spanning Tree using Prim's algorithm:" << endl;
    for (int i = 1; i < graph.vertices; i++) {
        cout << parent[i] << " - " << i << " with weight " << key[i] << endl;
    }
}

int main() {
    Graph g(9);

    // 添加边：无向图
    g.addEdge(0, 1, 4);
    g.addEdge(0, 7, 8);
    g.addEdge(1, 2, 8);
    g.addEdge(1, 7, 11);
    g.addEdge(2, 3, 7);
    g.addEdge(2, 5, 4);
    g.addEdge(2, 8, 2);
    g.addEdge(3, 4, 9);
    g.addEdge(3, 5, 14);
    g.addEdge(4, 5, 10);
    g.addEdge(5, 6, 2);
    g.addEdge(6, 7, 1);
    g.addEdge(6, 8, 6);
    g.addEdge(7, 8, 7);

    // 测试 BFS 和 DFS
    BFS(g, 0);
    DFS(g, 0);

    // 测试 Dijkstra 最短路径
    Dijkstra(g, 0);

    // 测试 Prim 最小生成树
    Prim(g);

    return 0;
}
