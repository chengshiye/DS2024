#include <iostream>
#include <vector>
#include <algorithm>
#include <chrono>

using namespace std;
using namespace chrono;

// 1. Bubble Sort
void bubbleSort(vector<int>& arr) {
    int n = arr.size();
    for (int i = 0; i < n - 1; ++i) {
        for (int j = 0; j < n - i - 1; ++j) {
            if (arr[j] > arr[j + 1]) {
                swap(arr[j], arr[j + 1]);
            }
        }
    }
}

// 2. Insertion Sort
void insertionSort(vector<int>& arr) {
    int n = arr.size();
    for (int i = 1; i < n; ++i) {
        int key = arr[i];
        int j = i - 1;
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            --j;
        }
        arr[j + 1] = key;
    }
}

// 3. Selection Sort
void selectionSort(vector<int>& arr) {
    int n = arr.size();
    for (int i = 0; i < n - 1; ++i) {
        int minIndex = i;
        for (int j = i + 1; j < n; ++j) {
            if (arr[j] < arr[minIndex]) {
                minIndex = j;
            }
        }
        swap(arr[i], arr[minIndex]);
    }
}

// 4. Merge Sort
void merge(vector<int>& arr, int left, int mid, int right) {
    int n1 = mid - left + 1;
    int n2 = right - mid;

    vector<int> L(n1), R(n2);
    for (int i = 0; i < n1; ++i) L[i] = arr[left + i];
    for (int i = 0; i < n2; ++i) R[i] = arr[mid + 1 + i];

    int i = 0, j = 0, k = left;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k++] = L[i++];
        } else {
            arr[k++] = R[j++];
        }
    }

    while (i < n1) arr[k++] = L[i++];
    while (j < n2) arr[k++] = R[j++];
}

void mergeSort(vector<int>& arr, int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;
        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);
        merge(arr, left, mid, right);
    }
}

// 5. Quick Sort
int partition(vector<int>& arr, int low, int high) {
    int pivot = arr[high];
    int i = low - 1;
    for (int j = low; j < high; ++j) {
        if (arr[j] <= pivot) {
            swap(arr[++i], arr[j]);
        }
    }
    swap(arr[i + 1], arr[high]);
    return i + 1;
}

void quickSort(vector<int>& arr, int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

// 6. Heap Sort
void heapify(vector<int>& arr, int n, int i) {
    int largest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    if (left < n && arr[left] > arr[largest]) largest = left;
    if (right < n && arr[right] > arr[largest]) largest = right;

    if (largest != i) {
        swap(arr[i], arr[largest]);
        heapify(arr, n, largest);
    }
}

void heapSort(vector<int>& arr) {
    int n = arr.size();
    for (int i = n / 2 - 1; i >= 0; --i) heapify(arr, n, i);
    for (int i = n - 1; i > 0; --i) {
        swap(arr[0], arr[i]);
        heapify(arr, i, 0);
    }
}

// Function to measure sorting performance
template <typename SortFunction>
void testSortPerformance(const string& sortName, SortFunction sortFunc, vector<int> arr) {
    auto start = high_resolution_clock::now();
    sortFunc(arr);
    auto end = high_resolution_clock::now();
    auto duration = duration_cast<milliseconds>(end - start);
    cout << sortName << " took " << duration.count() << " ms\\n";
}

int main() {
    const int n = 10000; // Size of the array
    vector<int> sortedArray(n), reversedArray(n), randomArray(n);

    // Initialize arrays
    for (int i = 0; i < n; ++i) {
        sortedArray[i] = i;
        reversedArray[i] = n - i;
        randomArray[i] = rand() % n;
    }

    // Test each sorting algorithm
    cout << "--- Sorted Array ---\\n";
    testSortPerformance("Bubble Sort", bubbleSort, sortedArray);
    testSortPerformance("Insertion Sort", insertionSort, sortedArray);
    testSortPerformance("Selection Sort", selectionSort, sortedArray);
    testSortPerformance("Merge Sort", [](vector<int>& arr) { mergeSort(arr, 0, arr.size() - 1); }, sortedArray);
    testSortPerformance("Quick Sort", [](vector<int>& arr) { quickSort(arr, 0, arr.size() - 1); }, sortedArray);
    testSortPerformance("Heap Sort", heapSort, sortedArray);

    cout << "--- Reversed Array ---\\n";
    testSortPerformance("Bubble Sort", bubbleSort, reversedArray);
    testSortPerformance("Insertion Sort", insertionSort, reversedArray);
    testSortPerformance("Selection Sort", selectionSort, reversedArray);
    testSortPerformance("Merge Sort", [](vector<int>& arr) { mergeSort(arr, 0, arr.size() - 1); }, reversedArray);
    testSortPerformance("Quick Sort", [](vector<int>& arr) { quickSort(arr, 0, arr.size() - 1); }, reversedArray);
    testSortPerformance("Heap Sort", heapSort, reversedArray);

    cout << "--- Random Array ---\\n";
    testSortPerformance("Bubble Sort", bubbleSort, randomArray);
    testSortPerformance("Insertion Sort", insertionSort, randomArray);
    testSortPerformance("Selection Sort", selectionSort, randomArray);
    testSortPerformance("Merge Sort", [](vector<int>& arr) { mergeSort(arr, 0, arr.size() - 1); }, randomArray);
    testSortPerformance("Quick Sort", [](vector<int>& arr) { quickSort(arr, 0, arr.size() - 1); }, randomArray);
    testSortPerformance("Heap Sort", heapSort, randomArray);

    return 0;
}
